from openpyxl import Workbook
from openpyxl.utils import get_column_letter
import sys

overfile=open(sys.argv[1], 'r')
overlines=overfile.readlines()
for overline in overlines:
    file1 = open(overline.strip(), 'r')
    Lines = file1.readlines()

    count=0
    name=0
    task_type=0
    sheet=0
    task_name=''
    task_name_w_yml=''
    sheet_name=''
    name_line=''
    temp_name_line=''
    temp_line=''
    if_use_temp_line1=0
    temp_line1=''
    start_rest_input=0
    list_column=[]
    temp_column=''
    if_hit=0
    if_with_items=0
    after_path=0
    target_name=''
    object_name=''
    path_name=''
    for line in Lines:

        if(line.find('- name')!=-1):
            name=1
            name_line=line.rstrip()
            list_column=['number']
            temp_column=''
            # print('line0:'+line)
        else:
            if(name==1): #hit name line
                if(line.find('hosts')!=-1): #not task
                    name=0            
                elif (line.find('aci_rest')!=-1): # task=aci_rest
                    task_type=1
                    temp_line=''
                    temp_line1=''
                    object_name=''
                    path_name=''
                    if_use_temp_line1=0
                    temp_line=temp_line+line.rstrip()+'\n'
                    # print('line1:'+line)
                    # task_name=task_name+'.yml'
                    # file_new=open(task_name, 'w')
                    # print(name_line)
                    # print(line.rstrip())
                elif (line.find('aci_')!=-1) and (task_type==0) : #task=aci_module
                    task_name=((line.strip()).split(':'))[0] #task_name=aci_module_name
                    task_type=2
                    temp_line=line.rstrip()+'\n'
                    temp_name_line=name_line.replace('Add','Post Query').replace('add','Post Query').replace('Create','Post Query').replace('create','Post Query')+'\n'
                    # print(name_line)
                    print(line.rstrip())
                    # print('line2:'+line)
                    task_name_w_yml='pre_query_'+task_name+'.yml'
                    file_new=open(task_name_w_yml, 'w')
                    file_new.writelines('#It is generated by the source task as:'+sys.argv[1]+'\n')
                    file_new.writelines(temp_name_line)
                    file_new.writelines(temp_line)

                elif (task_name=='') and (task_type==1): #task=aci_rest
                    if(line.find('": {')!=-1): #find=target_name
                        temp_name_line=name_line.replace('Add','Pre Query').replace('add','Pre Query').replace('Create','Pre Query').replace('create','Pre Query')+'\n'
                        start_rest_input=1
                        #task_name=name of the task for aci_rest call
                        task_name=line.split('"')[1]
                        task_name_w_yml='pre_query_'+line.split('"')[1]+'.yml'
                        file_new=open(task_name_w_yml, 'w')
                        file_new.writelines('#It is generated by the script with the sourcing file as:'+sys.argv[1]+'\n')
                        #first line about "- name"
                        file_new.writelines(temp_name_line)
                        #file_new=open(task_name, 'w')
                        #temp_line=temp_line+task_name+'&query-target-filter=eq('+task_name+'.name,{{ '
                        # print( temp_line)
                        # file_new.writelines(temp_line)
                    elif start_rest_input==0: #not reach aci_rest target object
                        if line.find('path')!=-1: #reach path: statement
                            #temp_line=temp_line+'      '+line.strip().split('tn-{{ item.tenantName }}')[0]+'tn-{{ item.tenantName }}.json?query-target=children&target-subtree-class='
                            path_name=line.rstrip()
                            after_path=1
                        elif after_path==0:
                            temp_line=temp_line+line.rstrip()+'\n'
                        # print(line.rstrip()) 
                    else:
                        print('!'+line.rstrip())
                        temp_line=line.rstrip()+'\n'
                        file_new.writelines(temp_line.rstrip())
                                    
                elif(task_type==2)and (line.find('with_items')!=-1): #cisco aci module, reach with_items, find sheet name 
                    if_with_items=1
                    file_new.writelines('    register: query_result'+'\n')
                    sheet_name=(((line.split('{{'))[1]).split('}'))[0].strip()
                    temp_line=line.rstrip()+'\n'
                    if len(task_name)>29:
                        temp_line=(((line.split('{{'))[0]).rstrip("'")).rstrip('"')+"\"{{ "+task_name[0:29]+" }}\""+'\n'
                    else:
                        temp_line=(((line.split('{{'))[0]).rstrip("'")).rstrip('"')+"\"{{ "+task_name+" }}\""+'\n'
                    file_new.writelines(temp_line)
                    


                elif(task_type==2): #other lines
                    if (line.find('state')!=-1):
                        temp_line=line.rstrip().split(':')[0]+': query\n'
                    else:
                        temp_line=line.rstrip()+'\n'
                    file_new.writelines(temp_line)
                    if(line.find(':')==-1):
                        #print(task_name+'  ')
                        file_new.writelines('\n')
                        if if_with_items==0:
                            file_new.writelines('    register: query_result'+'\n')

                        file_new.writelines('  - name: Assert the existing object'+'\n')    
                        file_new.writelines('    assert:'+'\n')
                        file_new.writelines('      that:'+'\n')
                        file_new.writelines('      - item.current == []'+'\n')
                        file_new.writelines('      success_msg: "Object does not exist. Can create it."'+'\n')
                        file_new.writelines('      fail_msg: "Object exists. DO NOT recreate it!."'+'\n')
                        file_new.writelines('    with_items: "{{query_result.results}}"'+'\n')
                        file_new.writelines('\n')
                        name=0
                        task_type=0
                        task_name=''
                        task_name_w_yml=''
                        start_rest_input=0
                        file_new.close()
                elif(task_type==1): # aci_rest after get task name, need 
                    if(if_use_temp_line1==1):
                        
                        if (temp_line1=='') and ((line.find('Dn')!=-1) or (line.find('dn')!=-1)): #get the children object name
                            #print(line)
                            temp_line1=line.split('"')[3]
                        # else:
                        #     if line.find('item.')!=-1:
                        #         object_name=line.split('item.')[1].split('}}')[0].strip()

                    if line.find('# the end')!=-1:
                        if(if_use_temp_line1==1):
                            temp_line='      path: /api/mo/'+temp_line1+'.json\n'
                        else:
                            temp_line=path_name+'\n'
                        # target_name=line.split('{{')[1].split('}}')[0].strip()
                        # temp_line=temp_line+target_name+' }}'+')'+'\n'
                        file_new.writelines('    aci_rest:'+'\n')
                        file_new.writelines('      host: "{{ inventory_hostname }}"'+'\n')
                        file_new.writelines('      username: "{{ username }}"'+'\n')
                        file_new.writelines('      password: "{{ password }}"'+'\n')
                        file_new.writelines('      validate_certs: no'+'\n')
                        file_new.writelines(temp_line)
                        file_new.writelines('      method: get'+'\n')
                        file_new.writelines('    register: query_result'+'\n')
                        file_new.writelines('    delegate_to: localhost'+'\n')
                        file_new.writelines('    with_items: "{{ '+task_name+'}}"\n')
                        file_new.writelines('\n')
                        file_new.writelines('  - name: Assert the object'+'\n')
                        file_new.writelines('    assert: '+'\n')
                        file_new.writelines('      that: \n')
                        file_new.writelines('      - item.imdata==[]'+'\n')
                        file_new.writelines('      success_msg: "Object does not exist. Can create it."'+'\n')
                        file_new.writelines('      fail_msg: "Object exists. DO NOT recreate it!"'+'\n')
                        file_new.writelines('    with_items: "{{query_result.results}}"\n')
                    if (line.find('children')!=-1) and (line.find('[]')==-1):
                        if_use_temp_line1=1

                    #print('!!'+line.rstrip())
                # else:
                #     # print('line3:'+line)
                        


        # count += 1
        # print("Line{}: {}".format(count, line.strip()))